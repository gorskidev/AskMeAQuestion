{"version":3,"sources":["logo.svg","questionimporter.js","answerimporter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","questionLoader","element","id","httpRequest","elementToPut","loadQuestion","readyState","XMLHttpRequest","DONE","status","innerHTML","responseText","alert","onreadystatechange","open","send","makeRequest","answerLoader","Merger","props","state","random","Math","floor","showAnswer","clicks","forceUpdateHandler","bind","this","setState","question","document","getElementById","answer","onClick","React","Component","App","script","createElement","async","src","head","appendChild","linkFetcher","array","i","length","push","join","addEventListener","e","window","target","console","log","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,wJCiC5BC,MAhCf,SAAwBC,EAASC,GAC7B,IAAIC,EAEEC,EAAeH,EAkBrB,SAASI,IACFF,EAAYG,aAAeC,eAAeC,OACf,MAAvBL,EAAYM,OACXL,EAAaM,UAAYP,EAAYQ,aAErCC,MAAM,gDAnBlB,WAGI,KAFAT,EAAc,IAAII,gBAId,OADAK,MAAM,2CACC,EAGXT,EAAYU,mBAAqBR,EAEjCF,EAAYW,KAAK,MAAO,wBAA0BZ,EAAK,QACvDC,EAAYY,OAbhBC,IC2BWC,MAjCf,SAAsBhB,EAASC,GAC3B,IAAIC,EAEEC,EAAeH,EAkBrB,SAASI,IACFF,EAAYG,aAAeC,eAAeC,OACf,MAAvBL,EAAYM,OACXL,EAAaM,UAAYP,EAAYQ,aAErCC,MAAM,gDAnBlB,WAGI,KAFAT,EAAc,IAAII,gBAId,OADAK,MAAM,2CACC,EAGXT,EAAYU,mBAAqBR,EAEjCF,EAAYW,KAAK,MAAO,0BAA4BZ,EAAK,QACzDC,EAAYY,OAbhBC,ICEEE,E,YACJ,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAEDC,MAAQ,CACXC,OAAQC,KAAKC,MAAsB,EAAhBD,KAAKD,UAAgB,EACxCG,YAAY,EACZC,OAAQ,GAEV,EAAKC,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBARV,E,kFAYhBC,KAAKC,SAAS,CAEZJ,OAAQ,IACP,WACD,IAAMK,EAAWC,SAASC,eAAe,YACnCC,EAASF,SAASC,eAAe,UAEvCD,SAASC,eAAe,gBAAgBtB,UAAY,iBACpDV,EAAe8B,EAAUF,KAAKR,MAAMC,QACpCY,EAAOvB,UAAY,GACnBkB,KAAKC,UAAS,SAAAT,GAAK,MAAI,CACrBI,YAAY,MAGXI,KAAKR,MAAMI,aACZP,EAAagB,EAAQL,KAAKR,MAAMC,QAChCO,KAAKC,UAAS,SAAAT,GAAK,MAAI,CACrBI,YAAY,EACZH,OAAQC,KAAKC,MAAsB,EAAhBD,KAAKD,UAAgB,MAE1CU,SAASC,eAAe,gBAAgBtB,UAAY,gC,+BAOxD,OACE,6BACE,uBAAGR,GAAG,aAEN,yBAAKA,GAAG,WAER,4BAAQA,GAAG,eAAegC,QAAWN,KAAKF,oBAA1C,qBACA,yBAAKxB,GAAG,kB,GA/CKiC,IAAMC,WA6FZC,E,YAvCb,aAAc,uE,iFAKZ,IAAMC,EAASP,SAASQ,cAAc,UACtCD,EAAOE,OAAQ,EAEfF,EAAOG,IAAM,wBACbV,SAASW,KAAKC,YAAYL,GAE1B,IAAMM,EAAc,SAAC3C,GAEnB,IADA,IAAI4C,EAAQ,GACJC,EAAI,EAAGA,EAAI7C,EAAQS,UAAUqC,OAAQD,IACf,MAAzB7C,EAAQS,UAAUoC,GACnBD,EAAMG,KAAK,KAEXH,EAAMG,KAAK/C,EAAQS,UAAUoC,IAGjC,OAAOD,EAAMI,KAAK,KAGpBlB,SAASC,eAAe,YAAYkB,iBAAiB,SAAS,SAASC,GACrEC,OAAOtC,KAAK,kCAAoC8B,EAAYO,EAAEE,QAAS,UACvEC,QAAQC,IAAIJ,EAAEE,OAAO3C,WACrB4C,QAAQC,IAAIX,EAAYO,EAAEE,c,+BAK5B,OACE,6BACE,kBAAC,EAAD,W,GAlCUlB,IAAMC,WChDJoB,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS9B,SAASC,eAAe,SD6H3C,kBAAmB8B,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9287b1c5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\r\nfunction questionLoader(element, id) {\r\n    var httpRequest;\r\n\r\n    const elementToPut = element;\r\n\r\n    makeRequest()\r\n\r\n    function makeRequest(){\r\n        httpRequest = new XMLHttpRequest();\r\n\r\n        if(!httpRequest){\r\n            alert(\"ERROR: Cannot create XMLHTTP instance.\");\r\n            return false;\r\n        }\r\n\r\n        httpRequest.onreadystatechange = loadQuestion;\r\n\r\n        httpRequest.open('GET', 'content/answers/text_' + id + '.txt');\r\n        httpRequest.send();\r\n    }\r\n\r\n    function loadQuestion(){\r\n        if(httpRequest.readyState === XMLHttpRequest.DONE){\r\n            if(httpRequest.status === 200){\r\n                elementToPut.innerHTML = httpRequest.responseText;\r\n            }else{\r\n                alert(\"There was a problem with loading question.\");\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport default questionLoader;","function answerLoader(element, id) {\r\n    var httpRequest;\r\n\r\n    const elementToPut = element;\r\n\r\n    makeRequest();\r\n\r\n    function makeRequest(){\r\n        httpRequest = new XMLHttpRequest();\r\n\r\n        if(!httpRequest){\r\n            alert(\"ERROR: Cannot create XMLHTTP instance.\");\r\n            return false;\r\n        }\r\n\r\n        httpRequest.onreadystatechange = loadQuestion;\r\n\r\n        httpRequest.open('GET', 'content/questions/text_' + id + '.txt');\r\n        httpRequest.send();\r\n    }\r\n\r\n    function loadQuestion(){\r\n        if(httpRequest.readyState === XMLHttpRequest.DONE){\r\n            if(httpRequest.status === 200){\r\n                elementToPut.innerHTML = httpRequest.responseText;\r\n            }else{\r\n                alert(\"There was a problem with loading question.\");\r\n            }\r\n        }\r\n    }\r\n\r\n};\r\n\r\nexport default answerLoader;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport questionLoader from './questionimporter.js';\nimport answerLoader from './answerimporter.js'; \n\n\nclass Merger extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      random: Math.floor(Math.random() * 9) + 1,\n      showAnswer: false,\n      clicks: 0\n    }\n    this.forceUpdateHandler = this.forceUpdateHandler.bind(this);\n  }\n\n  forceUpdateHandler(){\n    this.setState({\n      //showAnswer: true,\n      clicks: 0\n    }, function(){\n      const question = document.getElementById(\"question\");\n      const answer = document.getElementById(\"answer\");\n    \n      document.getElementById(\"answerButton\").innerHTML = \"Show me answer\";\n      questionLoader(question, this.state.random);\n      answer.innerHTML = \"\";\n      this.setState(state =>({\n        showAnswer: true,\n      }));\n      \n      if(this.state.showAnswer){\n        answerLoader(answer, this.state.random);\n        this.setState(state =>({\n          showAnswer: false,\n          random: Math.floor(Math.random() * 9) + 1\n        }));\n        document.getElementById(\"answerButton\").innerHTML = \"Ask me another question\";\n      }\n    });\n  };\n\n\n  render(){\n    return(\n      <div>\n        <a id=\"question\">\n        </a>\n        <div id=\"answer\">\n        </div>\n        <button id=\"answerButton\" onClick = {this.forceUpdateHandler}>Ask me a question</button>\n        <div id=\"progress\"></div>\n      </div>\n    )\n  }\n}\n\nclass App extends React.Component {\n  constructor(){\n    super();\n  }\n  \n  componentDidMount(){\n    const script = document.createElement(\"script\");\n    script.async = true;\n    //script.type = \"babel/text\";\n    script.src = \"/vendor/animations.js\";\n    document.head.appendChild(script);\n\n    const linkFetcher = (element) => {\n      let array = [];\n      for(let i = 0; i < element.innerHTML.length; i++){\n        if(element.innerHTML[i] === ' '){\n          array.push(\"+\");\n        }else{\n          array.push(element.innerHTML[i]);\n        }\n      }\n      return array.join(\"\");\n    }\n\n    document.getElementById(\"question\").addEventListener(\"click\", function(e) {\n      window.open('http://www.google.com/search?q=' + linkFetcher(e.target), '_blank');\n      console.log(e.target.innerHTML);\n      console.log(linkFetcher(e.target));\n    })\n  }\n\n  render(){\n    return(\n      <div>\n        <Merger />\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}